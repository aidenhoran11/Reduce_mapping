# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import map_reduce_pb2 as map__reduce__pb2


class DriverStub(object):
    """a service that will send files to workers have them map the words or reduce the files
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.requestTask = channel.unary_unary(
                '/driver.Driver/requestTask',
                request_serializer=map__reduce__pb2.req.SerializeToString,
                response_deserializer=map__reduce__pb2.Details.FromString,
                )
        self.mapResult = channel.unary_unary(
                '/driver.Driver/mapResult',
                request_serializer=map__reduce__pb2.Details.SerializeToString,
                response_deserializer=map__reduce__pb2.Details.FromString,
                )
        self.reduceResult = channel.unary_unary(
                '/driver.Driver/reduceResult',
                request_serializer=map__reduce__pb2.Details.SerializeToString,
                response_deserializer=map__reduce__pb2.Details.FromString,
                )


class DriverServicer(object):
    """a service that will send files to workers have them map the words or reduce the files
    """

    def requestTask(self, request, context):
        """determines how many times each word is said in a file
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mapResult(self, request, context):
        """Send the map result to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def reduceResult(self, request, context):
        """send the reduce result to the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'requestTask': grpc.unary_unary_rpc_method_handler(
                    servicer.requestTask,
                    request_deserializer=map__reduce__pb2.req.FromString,
                    response_serializer=map__reduce__pb2.Details.SerializeToString,
            ),
            'mapResult': grpc.unary_unary_rpc_method_handler(
                    servicer.mapResult,
                    request_deserializer=map__reduce__pb2.Details.FromString,
                    response_serializer=map__reduce__pb2.Details.SerializeToString,
            ),
            'reduceResult': grpc.unary_unary_rpc_method_handler(
                    servicer.reduceResult,
                    request_deserializer=map__reduce__pb2.Details.FromString,
                    response_serializer=map__reduce__pb2.Details.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'driver.Driver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Driver(object):
    """a service that will send files to workers have them map the words or reduce the files
    """

    @staticmethod
    def requestTask(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driver.Driver/requestTask',
            map__reduce__pb2.req.SerializeToString,
            map__reduce__pb2.Details.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mapResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driver.Driver/mapResult',
            map__reduce__pb2.Details.SerializeToString,
            map__reduce__pb2.Details.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def reduceResult(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/driver.Driver/reduceResult',
            map__reduce__pb2.Details.SerializeToString,
            map__reduce__pb2.Details.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
